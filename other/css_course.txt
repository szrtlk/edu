РАБОТА С CSS

ВВЕДЕНИЕ
* CSS - Cascading Style Sheets - каскадные таблицы стилей
* используются для описания визуального стиля и представления документа

ПРИМЕНЕНИЕ CSS ДЛЯ HTML
* связывание (linking) - таблица стилей хранится в отдельном файле; это связанные (внешние) стили
* внедрение (embedding) - стили указаны в теге <style> внутри тега <head>; это внедрённые (внутренние) стили
* встраивание (inlining) - стили указаны в атрибуте тега; это встроенные стили
* предпочтительным методом является связывание

СВЯЗЫВАНИЕ (LINKING)
* CSS хранятся в отдельном файле
* для ссылки на этот файл используется *одиночный* тег <link> внутри тега <head>
* пример - <link rel="stylesheet" type="text/css" href="style.css" />
* атрибут rel - тип и цель ссылки
* атрибут type - тип MIME-файла
* атрибует href - ссылка на файл CSS

ВНЕДРЕНИЕ (EMBEDDING)
* CSS указаны в теге <style> внутри тега <head>
* могут применяться в динамически генерируемых страницах, но их использование рекомендуется свести к минимуму
* пример - <style type="text/css"> p { font-weight: bold; } </style>

ВСТРАИВАНИЕ (INLINING)
* CSS указаны в атрибуте тега
* пример - <p style="font-weight: bold;" > Жирный текст </p>

СИНТАКСИС
* файл стилей должен начинаться с объявления @charset "UTF-8";
* каждое правило CSS является независимым и состоит из трёх частей: селектор (selector), свойство (property) и значение (value)
* совокупность свойства и значения называется объявлением (declaration)
* селектор состоит из объявления или группы объявлений
* селектор выбирает элементы, для которых применяются правила, а объявления устанавливают значения для различных свойств выбранных элементов 
* частая ошибка состоит в том, чтобы перепутать двоеточия, которые отделяют свойство и значение объявления, и точки с запятой, которые отделяют объявления между собой
* в примере ниже body - селектор, background-color - свойство, #000000 - значение

ПРИМЕР СИНТАКСИСА
body {
   background-color: #000000; 
   font-family: Georgia, "Times New Roman", Times, serif; 
   font-size: 100%; 
   color: #ffffff; 
   margin: 0px; 
   padding: 0px; 
   text-align: center; 
}

СВОЙСТВА
* полный список свойств можно увидеть здесь: https://www.w3.org/TR/CSS2/propidx.html
* ниже представлен пример свойств
* background-color - <color>, transparent, inherit
* background-image - <uri>, none, inherit
* inherit - такое же свойство, как у родительского элемента

ЕДИНИЦЫ ИЗМЕРЕНИЯ CSS
* для задания ширины, высоты и других длин можно использовать следующие единицы измерения
* относительные величины - em, ex, px, %
* абсолютные величины - mm, cm, pt, pc, in
* em - высота шрифта текущего элемента 	
* ex - высота символа х в нижнем регистре 	
* px - пиксель 	
* % - процент 	
* mm - миллиметр 	
* cm - сантиметр 	
* pt - пункт (1/72 дюйма) 	
* pc - пика (12 пунктов = 1/6 дюйма) 	
* in - дюйм (2,54 сантиметра)
* размеры шрифтов лучше устанавливать в em или %, использование px может вызвать проблемы
* абсолютные величины могут вызвать проблемы в старых браузерах

ВИДЫ СЕЛЕКТОРОВ
* селектор тегов, пример - body
* селектор атрибутов, пример - a[attr]
* контекстный селектор, пример - a b, стилизация элементов внутри другого элемента
* дочерний селектор, пример a > b
* соседний селектор, пример a + b, стилизация первых соседних элементов с общим родителем
* родственный селектор, пример a ~ b, стилизация всех соседних элементов с общим родителем
* универсальный селектор, используется *
* классы, пример a.b, используется для элементов с атрибутом class и необходимым значением
* идентификаторы, пример #b или a#b, используется для элементов с атрибутом id и необходимым значением, имя идентификатор должно быть уникальным, это позволяет их использовать вместе с JavaScript
* псевдо-классы, используется для определения стиля элемента страницы в зависимости от его динамического состояния, начинается с :
* псевдо-элементы, используется для определения стиля элемента, чётко не определённого в структуре документа, начинается с ::

РАБОТА С КЛАССАМИ
* класс можно задать как атрибут для тега HTML, например, так - <p class="ask"> или <p class="answer">
* селектор класса задаётся, например, так - p.ask или p.asnwer
* ниже представлен пример использования класса, используются внедрённые стили

ПРИМЕР ИСПОЛЬЗОВАНИЯ КЛАССА
<!DOCTYPE html> 
<html>
  <head>
     <title>
        Вопросы и ответы
     </title>
     <meta charset="utf-8" />
     <style type="text/css">
         p.ask {
            font-style: italic; 
            font-weight: bold; 
            font-family: Arial, sans-serif; 
            font-size: 10px; 
            color: gray; 
            margin-left: 15px; 
         }
         p.answer {
            font-family: 'Times New Roman', serif; 
            font-size: 12px; 
            color: black; 
         }
      </style>
   </head>
   <body>
      <p class="ask">
         Вопрос журналиста
      </p>
      <p class="answer">
         Ответ
      </p>
   </body>
</html>

РАБОТА С ИДЕНТИФИКАТОРАМИ
* идентификатор можно задать как атрибут для тега HTML, например, так - <p id="firstExample"
* селектор класса задаётся, например, так - #firstExample или p#firstExample

ПСЕВДОКЛАССЫ
* :link
* :visited
* :hover
* :active
* :focus
* :first-child — первый дочерний элемент
* :lang(language) — язык фрагмента документ.
* :last-child — последний дочерний элемент
* :first-of-type — первый дочерний элемент заданного типа
* :last-of-type — последний дочерний элемент заданного типа
* :nth-child(n) — n-дочерний элемент
* :nth-last-child(n) — n-дочерний элемент, отсчёт ведётся с конца
* :nth-of-type(n) — n-дочерний элемент заданного типа
* :nth-last-of-type(n) — n-дочерний элемент заданного типа, отсчёт ведётся с конца
* :not(selector) — стилизация элементов, которые не содержат заданный селектор

ПСЕВДОЭЛЕМЕНТЫ
* ::first-letter
* ::first-line
* ::before
* ::after

СЛОВО !IMPORTANT
* слово !important повышает приоритет стиля

ПРИОРИТЕТ ИСПОЛЬЗОВАНИЯ СТИЛЯ ОТ МЕНЬШЕГО К БОЛЬШЕМУ
* стили браузера по умолчанию
* стили браузера установленные клиентом
* внешняя таблица стилей link
* импортируемые таблицы @import
* глобальные таблицы стилей <style>…</style>
* встроенные таблицы стилей style
* правило помеченное верстальщиком !important
* правило помеченное пользователем !important

ТИПЫ ЭЛЕМЕНТОВ 
* свойство display определяет поведение элемента в документе
* ниже представлен список значений свойства, в скобках указаны HTML-элементы с аналогичным поведением
* block — блочный элемент
* inline — строчный элемент
* list-item — блочный элемент с маркером списка
* none — элемент удаляется из потока документа без сохранения места
* inline-block — блочный элемент с поведением, аналогичным строчному
* table — блочная таблица (table)
* inline-table — строчная таблица (table)
* table-row — строка таблицы (tr)
* table-cell — ячейка таблицы (td, th)
* table-caption — заголовок таблицы (caption)
* table-column — колонка таблицы (col)
* table-column-group — группа колонок (colgroup)
* table-header-group — верхняя часть таблицы (шапка) (thead)
* table-row-group — тело таблицы (tbody)
* table-footer-group — нижняя часть таблицы (подвал) (tfoot)

БЛОЧНАЯ МОДЕЛЬ (BOX MODEL)
* content - содержимое блока, информация
* padding - внутренний отступ
* border - граница
* outline - внешняя граница
* height и width - высота и ширина элемента

ВЫСОТА И ШИРИНА
* height
* min-height
* max-height
* width
* min-width
* max-width

ВНУТРЕННИЕ И ВНЕШНИЕ ОТСТУПЫ
* внутренние отступы - padding, padding-top, padding-bottom, padding-left, padding-right
* внешние отступы - margin, margin-top, margin-bottom, margin-left, margin-right
* свойство padding определяет расстояние от содержимого блока до его границы
* свойство margin определяет расстояние между границами соседних элементов

ГРАНИЦЫ ЭЛЕМЕНТА
* цвет границы - border-color, outline-color
* стиль границы - border-style, outline-style, значения - none, dotted (точками), dashed (пунктирами), solid (сплошная), double (двойная) и др.
* толщина границы - border-width, outline-width, значения - thin, medium, thick или единицы измерения CSS
* для границы border указанные свойства можно задать отдельно для каждой стороны, например, border-top-width, border-bottom-width, border-left-width, border-right-width
* для внешней границы outline можно задать свойства только сразу для всех 4 сторон

СОКРАЩЁННАЯ ЗАПИСЬ СВОЙСТВ
* используется для свойств paddimg, margin, border-color, border-style, border-width
* используется мнемоническое слово TRouBLe - top, right, bottom, left
* с помощью сокращённой записи можно задать значения свойств для каждой стороны отдельно
* 4 значения - T+R+B+L
* 3 значения - T+RL+B
* 2 значения - TB+RL
* 1 значение - TRBL
* пример записи - padding: 2px 4px 6px 8px

ЦВЕТА
* цвет текста - color
* цвет фона - background-color
* цвет границы - border-color
* ниже представлены методы спецификации цветов
* английские названия, такие как color: white; список английских названий представлен выше
* шестнадцатеричное значение RGB, например color: #ff0000
* десятичные RGB значения, например color: rgb(255, 0, 0)
* десятичные RGBA значения, такие как color: rgba(255, 0, 0, 0.2); последний аргумент обозначает прозрачность и принимает значения от 0 до 1
* HSL значение, например color: hsl(120, 100%, 50%); тон, насыщенность и яркость
* HSLA значение, например color: hsla(0, 100%, 50%, 0.5); тон, насыщенность, яркость, прозрачность

АНГЛИЙСКИЕ НАЗВАНИЯ ЦВЕТОВ
* коричневый - maroon, #800000
* красный - red, #ff0000
* оранжевый - orange, #ffA500
* жёлтый - yellow, #ffff00
* оливковый - olive, #808000
* фиолетовый - purple, #800080
* розовый - fuchsia, #ff00ff
* белый - white, #ffffff
* светло-зелёный - lime, #00ff00
* тёмно-зелёный - green, #008000
* тёмно-синий - navy, #000080
* синий - blue, #0000ff
* голубой - aqua, #00ffff
* бирюзовый - teal, #008080
* чёрный - black, #000000
* светло-серый - silver, #c0c0c0
* тёмно-серый - gray, #808080

ШРИФТЫ И СЕМЕЙСТВА ШРИФТОВ
* font-family - шрифты перечисляются через запятую в порядке приоритета, в конце указывается семейство шрифтов
* если название шрифта содержит пробел, то его нужно заключить в '' или ""
* существует 5 семейств шрифтов
* serif - шрифты с засечками
* sans-serif - шрифты без засечек
* monospice - моноширинные
* cursive - курсивные
* fantasy - декоративные

СТИЛЬ ШРИФТА
* font-style - принимает 3 значения
* normal - обычный
* italic - курсивный
* oblique - наклонный, браузеры обычно его отображают как курсивный

ВАРИАНТ ШРИФТА
* font-variant - принимает 2 значения
* normal - обычный
* small-caps - капитель, то есть все строчные символы становятся уменьшенными заглавными

ВЕС (НАСЫЩЕННОСТЬ) ШРИФТА
* font-weight - принимает следующие значения
* 100
* 200
* 300
* 400 или normal
* 500
* 600
* 700 или bold
* 800
* 900

РАЗМЕР ШРИФТА
* font-size - принимает следующие значения
* абсолютные константы - xx-small, x-small, small, medium, large, x-large, xx-large
* относительные константы - smaller, larger
* абсолютные и относительные единицы измерения CSS

МЕЖСТРОЧНЫЙ ИНТЕРВАЛ
* line-height - часто применяется с font-size, принимает следующие значения
* normal - нормальное значение
* number - число, на которое умножается текущий размер шрифта
* length - фиксированное значение в единицах измерения CSS
* % - проценты от текущего размера шрифта
